# ______________Библиотека - requests_____________________________________

import requests


url = 'https://www.google.com/search'
dict_search = {'q': 'вики ад зависимостей'}

#  Делают гет запрос с помощью функции 'get()'. Куда передаю адрес ресурса 'url' и
# словарь 'dict_search' с данными для запроса в строке URL.
r = requests.get(url, params=dict_search)

# Проверяю код 'статуса ответа' по нашему запросу.
if r.status_code == 200:
    print('200 OK')

# Вывожу в консоль новый URL адрес.
print('Ссылка на результат поиска "вики ад зависимостей" в google:\n', r.url)
print('_' * 150, '\n')
# _________________________________________________________________________


# ______________Библиотека - numpy_________________________________________

import numpy


# Создадим двумерный массив.
A = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Проверим количество измерений массива с помощью команды "ndim".
print(A.ndim, '\n')

# Создадим еще один массив.
B = numpy.arange(1, 10)
# Изменим форму массива на двумерную. И напечатаем массив в консоль.
B = B.reshape(3, 3)
print(B, '\n')

# Создадим матрицу 'С' путём умножения матрицы 'А' на 'В' с помощью функции 'dot()'.
# Напечатаем матрицу.
C = numpy.dot(A, B)
print(C, '\n')

# Поменяем местами строки со столбцами в матрице 'C'.
# 1-ую строку с 1-ым столбцом и т.д.. Напечатаем матрицу.
C = C.transpose()
print(C)
# _________________________________________________________________________


# ______________Библиотека - matplotlib____________________________________

import matplotlib.pyplot as plt


# Создаем окно под названием матрица.
window = plt.figure('Матрица', figsize=(5, 5))

# Показываем оси.
window.subplots()

# Подпишем оси.
plt.xlabel('Ось X')
plt.ylabel('Ось Y')

# Добавим основную надпись.
plt.title('Матрица "C"')

# Добавляем сетку.
plt.grid()

x = [i for i in range(1, 4)] * 3
y = [i for i in range(1, 4)] * 3
y.sort()
y = y[::-1]
matrix_C = [int(i) for j in C for i in j]
matrix_C_color = ['green' if c % 2 else 'red' for c in matrix_C]
matrix_C = list(zip(x, y, matrix_C))

# Расставим точки для будующей матрицы. Так же зададим размер через параметр 's=' и их цвет через параметр 'c='.
# Если число матрицы нечетное, то цвет зелёный, если четное то красный.
plt.scatter(x, y, s=600, c=matrix_C_color)

# Подпишем наши точки на заранее созданом списке 'matrix_C', который включает в себя числа из матрицы 'С' из прошлого
# задания и координаты наших точек на графике. Зададим размер label через параметр 'fontsize='.
for x, y, label in matrix_C:
    plt.text(x, y, label, fontsize=20)

# Отображения окна на экране.
plt.show()
